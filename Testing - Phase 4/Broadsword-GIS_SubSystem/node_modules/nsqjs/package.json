{
  "_args": [
    [
      {
        "raw": "nsqjs@^0.7.13",
        "scope": null,
        "escapedName": "nsqjs",
        "name": "nsqjs",
        "rawSpec": "^0.7.13",
        "spec": ">=0.7.13 <0.8.0",
        "type": "range"
      },
      "C:\\Users\\Johan\\Documents\\Univircity of PTA\\2017\\COS301\\NavUP\\Round 3. - Implementation\\GIS_SubSystem"
    ]
  ],
  "_from": "nsqjs@>=0.7.13 <0.8.0",
  "_id": "nsqjs@0.7.13",
  "_inCache": true,
  "_location": "/nsqjs",
  "_nodeVersion": "6.9.2",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/nsqjs-0.7.13.tgz_1483399507533_0.2603977338876575"
  },
  "_npmUser": {
    "name": "dudley",
    "email": "dudley.carr@gmail.com"
  },
  "_npmVersion": "3.10.9",
  "_phantomChildren": {},
  "_requested": {
    "raw": "nsqjs@^0.7.13",
    "scope": null,
    "escapedName": "nsqjs",
    "name": "nsqjs",
    "rawSpec": "^0.7.13",
    "spec": ">=0.7.13 <0.8.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/nsqjs/-/nsqjs-0.7.13.tgz",
  "_shasum": "08adb62bc1e7cc6954c402d3b2772ad2ec8dc5fc",
  "_shrinkwrap": null,
  "_spec": "nsqjs@^0.7.13",
  "_where": "C:\\Users\\Johan\\Documents\\Univircity of PTA\\2017\\COS301\\NavUP\\Round 3. - Implementation\\GIS_SubSystem",
  "author": {
    "name": "Dudley Carr",
    "email": "dudley.carr@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/dudleycarr/nsqjs/issues"
  },
  "dependencies": {
    "async": "^2.1.4",
    "bignumber.js": "~1.2.1",
    "debug": "^2.6.0",
    "moment": "^2.17.1",
    "node-int64": "~0.3.0",
    "node-state": "~1.4.4",
    "request": "^2.79.0",
    "snappystream": "^0.3.4",
    "underscore": "~1.5.2"
  },
  "description": "NodeJS client for NSQ",
  "devDependencies": {
    "coffee-errors": "^0.8.6",
    "coffee-script": "^1.12.2",
    "coffeelint": "~1.0.2",
    "grunt": "^1.0.0",
    "grunt-cli": "^1.2",
    "grunt-coffeelint": "0.0.16",
    "grunt-contrib-coffee": "^1.0",
    "grunt-contrib-watch": "^1.0.0",
    "grunt-mocha-cli": "^3.0.0",
    "mocha": "^3.2",
    "nock": "~0.27.1",
    "should": "^11.1.2",
    "sinon": "~1.7.3",
    "temp": "^0.8.0"
  },
  "directories": {},
  "dist": {
    "shasum": "08adb62bc1e7cc6954c402d3b2772ad2ec8dc5fc",
    "tarball": "https://registry.npmjs.org/nsqjs/-/nsqjs-0.7.13.tgz"
  },
  "engines": {
    "node": ">= 0.10.0"
  },
  "gitHead": "792d200304526b06f50bd54fe0c73574ed8179f7",
  "homepage": "https://github.com/dudleycarr/nsqjs",
  "keywords": [
    "nsq",
    "nsq client",
    "nsq client official",
    "nsqjs",
    "distributed messaging",
    "messaging",
    "task",
    "task management"
  ],
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/dudleycarr/nsqjs/blob/master/LICENSE-MIT"
    }
  ],
  "main": "lib/nsq",
  "maintainers": [
    {
      "name": "dudley",
      "email": "dudley.carr@gmail.com"
    }
  ],
  "name": "nsqjs",
  "optionalDependencies": {},
  "readme": "nsqjs\n=====\nThe official NodeJS client for the [nsq](http://nsq.io/) client protocol. This implementation attempts to be\nfully compliant and maintain feature parity with the official Go ([go-nsq](https://github.com/nsqio/go-nsq)) and Python ([pynsq](https://github.com/nsqio/pynsq)) clients.\n\n[![Build Status](https://travis-ci.org/dudleycarr/nsqjs.png?branch=master)](https://travis-ci.org/dudleycarr/nsqjs)\n\n[![NPM](https://nodei.co/npm/nsqjs.png?downloads=true)](https://nodei.co/npm/nsqjs/)\n\nUsage\n-----\n\n### new Reader(topic, channel, options)\nThe topic and channel arguments are strings and must be specified. The options\nargument is optional. Below are the parameters that can be specified in the\noptions object.\n\n* ```maxInFlight: 1``` <br/>\n  The maximum number of messages to process at once. This value is shared between nsqd connections. It's highly recommended that this value is greater than the number of nsqd connections.\n* ```heartbeatInterval: 30``` <br/>\n  The frequency in seconds at which the nsqd will send heartbeats to this Reader.\n* ```maxBackoffDuration: 128``` <br/>\n  The maximum amount of time (seconds) the Reader will backoff for any single backoff\n  event.\n* ```maxAttempts: 0``` <br/>\n  The number of times a given message will be attempted (given to MESSAGE handler) before it will be handed to the DISCARD handler and then automatically finished. 0 means that there is **no limit.** If no DISCARD handler is specified and `maxAttempts > 0`, then the message will be finished automatically when the number of attempts has been exhausted.\n* ```requeueDelay: 90``` <br/>\n  The default amount of time (seconds) a message requeued should be delayed by before being dispatched by nsqd.\n* ```nsqdTCPAddresses``` <br/>\n  A string or an array of strings representing the host/port pair for nsqd instances.\n  <br/> For example: `['localhost:4150']`\n* ```lookupdHTTPAddresses``` <br/>\n  A string or an array of strings representing the host/port pair of nsqlookupd instaces or the full HTTP/HTTPS URIs of the nsqlookupd instances.\n  <br/> For example: `['localhost:4161']`, `['http://localhost/lookup']`, `['http://localhost/path/lookup?extra_param=true']`\n* ```lookupdPollInterval: 60``` <br/>\n  The frequency in seconds for querying lookupd instances.\n* ```lookupdPollJitter: 0.3``` <br/>\n  The jitter applied to the start of querying lookupd instances periodically.\n* ```tls: false``` <br/>\n  Use TLS if nsqd has TLS support enabled.\n* ```tlsVerification: true``` <br/>\n  Require verification of the TLS cert. This needs to be false if you're using\n  a self signed cert.\n* ```deflate: false``` <br/>\n  Use zlib Deflate compression.\n* ```deflateLevel: 6``` <br/>\n  Use zlib Deflate compression level.\n* ```snappy: false``` <br/>\n  Use Snappy compression.\n* ```authSecret: null```<br/>\n  Authenticate using the provided auth secret.\n* ```outputBufferSize: null```<br/>\n  The size in bytes of the buffer nsqd will use when writing to this client. -1\n  disables buffering. ```outputBufferSize >= 64```\n* ```outputBufferTimeout: null```<br/>\n  The timeout after which any data that nsqd has buffered will be flushed to this client. Value is in milliseconds. ```outputBufferTimeout >= 1```. A value of ```-1``` disables timeouts.\n* ```messageTimeout: null```<br/>\n  Sets the server-side message timeout in milliseconds for messages delivered to this client.\n* ```sampleRate: null```<br/>\n  Deliver a percentage of all messages received to this connection. ```1 <=\n  sampleRate <= 99```\n* ```clientId: null```<br/>\n  An identifier used to disambiguate this client.\n  \n\nReader events are:\n\n* `Reader.MESSAGE` or `message`\n* `Reader.DISCARD` or `discard`\n* `Reader.ERROR` or `error`\n* `Reader.NSQD_CONNECTED` or `nsqd_connected`\n* `Reader.NSQD_CLOSED` or `nsqd_closed`\n\n`Reader.MESSAGE` and `Reader.DISCARD` both produce `Message` objects.\n`Reader.NSQD_CONNECTED` and `Reader.NSQD_CLOSED` events both provide the host\nand port of the nsqd to which the event pertains.\n\nThese methods are available on a Reader object:\n* `connect()` <br/>\n  Connect to the nsqds specified or connect to nsqds discovered via\n  lookupd.\n* `close()` <br/>\n  Disconnect from all nsqds. Does not wait for in-flight messages to complete.\n* `pause()` <br/>\n  Pause the Reader by stopping message flow. Does not affect in-flight\n  messages.\n* `unpause()` <br/>\n  Unpauses the Reader by resuming normal message flow.\n* `isPaused()` <br/>\n  `true` if paused, `false` otherwise.\n\n\n### Message\nThe following properties and methods are available on Message objects produced by a Reader\ninstance.\n\n* `timestamp` <br/>\n  Numeric timestamp for the Message provided by nsqd.\n* `attempts` <br/>\n  The number of attempts that have been made to process this message.\n* `id` <br/>\n  The opaque string id for the Message provided by nsqd.\n* `hasResponded` <br/>\n  Boolean for whether or not a response has been sent.\n* `body` <br/>\n  The message payload as a Buffer object.\n* `json()` <br/>\n  Parses message payload as JSON and caches the result.\n* `timeUntilTimeout(hard=false)`: <br/>\n  Returns the amount of time until the message times out. If the hard argument\n  is provided, then it calculates the time until the hard timeout when nsqd\n  will requeue inspite of touch events.\n* `finish()` <br/>\n  Finish the message as successful.\n* `requeue(delay=null, backoff=true)`\n  The delay is in milliseconds. This is how long nsqd will hold on the message\n  before attempting it again. The backoff parameter indicates that we should\n  treat this as an error within this process and we need to backoff to recover.\n* `touch()` <br/>\n  Tell nsqd that you want extra time to process the message. It extends the\n  soft timeout by the normal timeout amount.\n\n### new Writer(nsqdHost, nsqdPort, options)\nAllows messages to be sent to an nsqd. \n\nAvailable Writer options:\n* ```tls: false``` <br/>\n  Use TLS if nsqd has TLS support enabled.\n* ```tlsVerification: true``` <br/>\n  Require verification of the TLS cert. This needs to be false if you're using\n  a self signed cert.\n* ```deflate: false``` <br/>\n  Use zlib Deflate compression.\n* ```deflateLevel: 6``` <br/>\n  Use zlib Deflate compression level.\n* ```snappy: false``` <br/>\n  Use Snappy compression.\n* ```clientId: null```<br/>\n  An identifier used to disambiguate this client.\n\nWriter events are:\n\n* `Writer.READY` or `ready`\n* `Writer.CLOSED` or `closed`\n* `Writer.ERROR` or `error`\n\nThese methods are available on a Writer object:\n* `connect()` <br/>\n  Connect to the nsqd specified.\n* `close()` <br/>\n  Disconnect from nsqd.\n* `publish(topic, msgs, [callback])` <br/>\n  `topic` is a string. `msgs` is either a string, a `Buffer`, JSON serializable\n  object, a list of strings / `Buffers` / JSON serializable objects. `callback` takes a single `error` argument.\n\n### Simple example\n\nStart [nsqd](http://nsq.io/components/nsqd.html) and\n[nsqdlookupd](http://nsq.io/components/nsqlookupd.html)\n```bash\n# nsqdLookupd Listens on 4161 for HTTP requests and 4160 for TCP requests\n$ nsqlookupd &\n$ nsqd --lookupd-tcp-address=127.0.0.1:4160 &\n```\n\n#### JavaScript\n```js\nvar nsq = require('nsqjs');\n\nvar reader = new nsq.Reader('sample_topic', 'test_channel', {\n  lookupdHTTPAddresses: '127.0.0.1:4161'\n});\n\nreader.connect();\n\nreader.on('message', function (msg) {\n  console.log('Received message [%s]: %s', msg.id, msg.body.toString());\n  msg.finish();\n});\n```\n\n#### CoffeeScript\n```coffee-script\nnsq = require 'nsqjs'\n\ntopic = 'sample_topic'\nchannel = 'test_channel'\noptions =\n  lookupdHTTPAddresses: '127.0.0.1:4161'\n\nreader = new nsq.Reader topic, channel, options\nreader.connect()\n\nreader.on nsq.Reader.MESSAGE, (msg) ->\n  console.log \"Received message [#{msg.id}]: #{msg.body.toString()}\"\n  msg.finish()\n```\n\nPublish a message to nsqd to be consumed by the sample client:\n```bash\n$ curl -d \"it really tied the room together\" http://localhost:4151/pub?topic=sample_topic\n```\n\n### Example with message timeouts\n\nThis script simulates a message that takes a long time to process or at least\nlonger than the default message timeout. To ensure that the message doesn't\ntimeout while being processed, touch events are sent to keep it alive.\n\n#### JavaScript\n```js\nvar nsq = require('nsqjs');\n\nvar reader = new nsq.Reader('sample_topic', 'test_channel', {\n  lookupdHTTPAddresses: '127.0.0.1:4161'\n});\n\nreader.connect();\n\nreader.on('message', function (msg) {\n  console.log('Received message [%s]', msg.id);\n\n  function touch() {\n    if (!msg.hasResponded) {\n      console.log('Touch [%s]', msg.id);\n      msg.touch();\n      // Touch the message again a second before the next timeout.\n      setTimeout(touch, msg.timeUntilTimeout() - 1000);\n    }\n  }\n\n  function finish() {\n    console.log('Finished message [%s]: %s', msg.id, msg.body.toString());\n    msg.finish();\n  }\n\n  console.log('Message timeout is %f secs.', msg.timeUntilTimeout() / 1000);\n  setTimeout(touch, msg.timeUntilTimeout() - 1000);\n\n  // Finish the message after 2 timeout periods and 1 second.\n  setTimeout(finish, msg.timeUntilTimeout() * 2 + 1000);\n});\n```\n\n#### CoffeeScript\n```coffee-script\n{Reader} = require 'nsqjs'\n\ntopic = 'sample_topic'\nchannel = 'test_channel'\noptions =\n  lookupdHTTPAddresses: '127.0.0.1:4161'\n\nreader = new Reader topic, channel, options\nreader.connect()\n\nreader.on Reader.MESSAGE, (msg) ->\n  console.log \"Received message [#{msg.id}]\"\n\n  touch = ->\n    unless msg.hasResponded\n      console.log \"Touch [#{msg.id}]\"\n      msg.touch()\n      # Touch the message again a second before the next timeout.\n      setTimeout touch, msg.timeUntilTimeout() - 1000\n\n  finish = ->\n    console.log \"Finished message [#{msg.id}]: #{msg.body.toString()}\"\n    msg.finish()\n\n  console.log \"Message timeout is #{msg.timeUntilTimeout() / 1000} secs.\"\n  setTimeout touch, msg.timeUntilTimeout() - 1000\n\n  # Finish the message after 2 timeout periods and 1 second.\n  setTimeout finish, msg.timeUntilTimeout() * 2 + 1000\n```\n\n### Enable nsqjs debugging\nnsqjs uses [debug](https://github.com/visionmedia/debug) to log debug output.\n\nTo see all nsqjs events:\n```\n$ DEBUG=nsqjs:* node my_nsqjs_script.js\n```\n\nTo see all reader events:\n```\n$ DEBUG=nsqjs:reader:* node my_nsqjs_script.js\n```\n\nTo see a specific reader's events:\n```\n$ DEBUG=nsqjs:reader:<topic>/<channel>:* node my_nsqjs_script.js\n```\n> Replace `<topic>` and `<channel>`\n\nTo see all writer events:\n```\n$ DEBUG=nsqjs:writer:* node my_nsqjs_script.js\n```\n\n\n### A Writer Example\n\nThe writer sends a single message and then a list of messages.\n\n#### JavaScript\n```js\nvar nsq = require('nsqjs');\n\nvar w = new nsq.Writer('127.0.0.1', 4150);\n\nw.connect();\n\nw.on('ready', function () {\n  w.publish('sample_topic', 'it really tied the room together');\n  w.publish('sample_topic', [\n    'Uh, excuse me. Mark it zero. Next frame.', \n    'Smokey, this is not \\'Nam. This is bowling. There are rules.'\n  ]);\n  w.publish('sample_topic', 'Wu?', function (err) {\n    if (err) { return console.error(err.message); }\n    console.log('Message sent successfully');\n    w.close();\n  });\n});\n\nw.on('closed', function () {\n  console.log('Writer closed');\n});\n```\n\n#### CoffeeScript\n```coffee-script\n{Writer} = require 'nsqjs'\n\nw = new Writer '127.0.0.1', 4150\nw.connect()\n\nw.on Writer.READY, ->\n  w.publish 'sample_topic', 'it really tied the room together'\n  w.publish 'sample_topic', ['Uh, excuse me. Mark it zero. Next frame.', \n    'Smokey, this is not \\'Nam. This is bowling. There are rules.']\n  w.publish 'sample_topic', 'Wu?', (err) ->\n    console.log 'Message sent successfully' unless err?\n    w.close()\n\nw.on Writer.CLOSED, ->\n  console.log 'Writer closed'\n```\n\nChanges\n-------\n* **0.7.12**\n  * Bug: Fix issue introduced by not sending RDY count to main max-in-flight.\n    Readers connected to mulitple nsqds do not set RDY count for connections\n    made after the first nsqd connection.\n* **0.7.11**\n  * Improvement: Keep track of touch count in Message instances.\n  * Improvement: Stop sending RDY count to main max-in-flight for newer\n    versions of nsqd.\n  * Improvement: Make the connect debug message more accurate in Reader.\n    Previously lookupd poll results suggested new connections were being made\n    when they were not.\n  * Bug: Non-fatal nsqd errors would cause RDY count to decrease and never\n    return to normal. This will happen for example when finishing messages\n    that have exceeded their amount of time to process a message.\n  * \n* **0.7.10**\n  * Properly handles non-string errors\n* **0.7.9**\n  * Treat non-fatal errors appropriately\n* **0.7.7**\n  * Build with Node v4\n* **0.7.6**\n  * Fix npm install by adding .npmignore.\n* **0.7.3**\n  * Slightly better invalid topic and channel error messages.\n  * Handle more conditions for failing to publish a message.\n* **0.7.2**\n\t* Fix build for iojs and node v0.12\n\t* Bumped snappystream version.\n* **0.7.1**\n  * Fix connection returning to max connection RDY after backoff\n  * Fix backoff ignored when `message.finish` is called after backoff event.\n* **0.7.0**\n  * Fixes for configuration breakages\n  * Fix for AUTH\n  * Fix for pause / unpause\n  * Automatically finish messages when maxAttempts have been exceeded.\n  * `maxAttempts` is now by default 0. [ Breaking Change! ]\n  * discarded messages will now be sent to the `MESSAGE` listener if there's no\n    `DISCARD` listener.\n  * Support for emphemeral topics.\n  * Support for 64 char topic / channel names.\n  * Support for Lookupd URLs\n  * Deprecate StateChangeLogger infavor of `debug` [ Breaking Change! ]\n* **0.6.0**\n  * Added support for authentication\n  * Added support for sample rate\n  * Added support for specifying outputBufferSize and outputBufferTimeout\n  * Added support for specifying msg_timeout\n  * Refactored configuration checks\n  * Breaking change for NSQDConnection constructor. NSQDConnection takes an\n    options argument instead of each option as a parameter.\n* **0.5.1**\n  * Fix for not failing when the nsqd isn't available on start.\n* **0.5.0**\n  * Reworked FrameBuffer\n  * Added TLS support for Reader and Writer\n  * Added Deflate support\n  * Added Snappy support\n* **0.4.1**\n\t* Fixed a logging issue on NSQConnection disconnected\n* **0.4.0**\n\t* Added `close`, `pause`, and `unpause` to Reader\n\t* Added callback for Writer publish\n  * Expose error events on Reader/Writer\n  * Expose nsqd connect / disconnect events\n  * Fix crash when Message `finish`, `requeue`, etc after nsqd disconnect\n  * Fix lookupd only queried on startup.\n* **0.3.1**\n  * Fixed sending an array of Buffers\n  * Fixed sending a message with multi-byte characters\n* **0.3.0**\n  * Added Writer implementation\n* **0.2.1**\n  * Added prepublish compilation to JavaScript.\n* **0.2.0**\n  * `ReaderRdy`, `ConnectionRdy` implementation\n  * `Reader` implementation\n  * Initial documentation\n  * `NSQDConnection`\n    * Moved defaults to `Reader`\n    * Support protocol / state logging\n    * `connect()` now happens on next tick so that it can be called before event\n      handlers are registered.\n  * `Message`\n    * Correctly support `TOUCH` events\n    * Support soft and hard timeout timings\n    * JSON parsing of message body\n* **0.1.0**\n  * `NSQDConnection` implementation\n  * `wire` implementation\n  * `Message` implementation\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/dudleycarr/nsqjs.git"
  },
  "scripts": {
    "build": "coffee --bare --compile --output lib src/*.coffee",
    "postpublish": "rm -rf lib",
    "prepublish": "coffee --bare --compile --output lib src/*.coffee",
    "test": "grunt test"
  },
  "version": "0.7.13"
}
